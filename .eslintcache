[{"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\index.js":"1","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\App.js":"2","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\reportWebVitals.js":"3","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\MainPage.js":"4","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\Login.js":"5","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\Register.js":"6","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\ImageCard.js":"7","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\ImageModal.js":"8","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\firebase.js":"9","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\DeleteModal.js":"10","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\firebaseWithSecrets.js":"11"},{"size":971,"mtime":1609388840971,"results":"12","hashOfConfig":"13"},{"size":1813,"mtime":1609470600853,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":9367,"mtime":1609475309009,"results":"16","hashOfConfig":"13"},{"size":4272,"mtime":1609470144090,"results":"17","hashOfConfig":"13"},{"size":4549,"mtime":1609469678286,"results":"18","hashOfConfig":"13"},{"size":2723,"mtime":1609464155726,"results":"19","hashOfConfig":"13"},{"size":6975,"mtime":1609465692359,"results":"20","hashOfConfig":"13"},{"size":621,"mtime":1609475241550,"results":"21","hashOfConfig":"13"},{"size":1388,"mtime":1609464215745,"results":"22","hashOfConfig":"13"},{"size":541,"mtime":1609475165477,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1n9ol4o",{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\index.js",[],["49","50"],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\App.js",["51","52","53"],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\reportWebVitals.js",[],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\MainPage.js",["54","55","56","57","58"],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\Login.js",["59","60","61"],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\Register.js",["62","63","64"],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\ImageCard.js",["65","66"],"\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button'\r\nimport './ImageCard.css'\r\nimport DeleteModal from './DeleteModal'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  }\r\n}));\r\n\r\nconst ImageCard = props => {\r\n\r\n\tconst classes = useStyles();\r\n    const avatarStyle = {backgroundColor: props.imageData.color}\r\n    const [open, setOpen] = useState(false)\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState(false)\r\n   \r\n    return (  \r\n        <Card className={classes.root + \" imageCard\"}>\r\n            <Dialog open={open} onClose={() => setOpen(false)}>\r\n                <img style={{ width: '100%' }} src={props.imageData.imageSrc} />\r\n            </Dialog>\r\n            <DeleteModal imageTitle={props.imageData.title} deleteImg={props.deleteImg} open={deleteModalOpen} setDeleteModalOpen={(state) => setDeleteModalOpen(state)}></DeleteModal>\r\n            <CardHeader\r\n                avatar={\r\n                <Avatar aria-label=\"recipe\" style={avatarStyle}>\r\n                    {props.imageData.avatarInitial}\r\n                </Avatar>\r\n                }\r\n                title={props.imageData.title}\r\n                subheader={props.imageData.date}\r\n            />\r\n            <CardMedia\r\n                className={'imageCard'}\r\n                onClick={() => setOpen(true)}\r\n                className={classes.media}\r\n                image={props.imageData.imageSrc}\r\n                title={props.imageData.imageId}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n\t\t\t\t\t{props.imageData.description}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={() => props.updateImage(props.imageData)}>\r\n                \tUpdate\r\n                </Button>\r\n                <Button size=\"small\" color=\"primary\" onClick={() => {\r\n                    setDeleteModalOpen(true)\r\n                }}>\r\n                \tDelete\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ImageCard;","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\ImageModal.js",["67","68","69","70","71","72","73","74"],"import {useState, useEffect} from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport { SliderPicker } from 'react-color';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {DropzoneArea} from 'material-ui-dropzone'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst ImageModal = props => {\r\n    let action = props.action == \"CREATE\" ? 'Create' : 'Update'\r\n\r\n    const [imageTitle, setImageTitle] = useState(\"\")\r\n    const [imageColor, setImageColor] = useState(\"#FF0000\")\r\n    const [imageFile, setImageFile] = useState(\"\")\r\n    const [imageDesc, setImageDesc] = useState(\"\")\r\n\r\n    const [imageLastModified, setImageLastModified] = useState(null)\r\n    \r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setImageTitle(props.imageModalData[\"title\"])\r\n        setImageColor(props.imageModalData[\"color\"])\r\n        setImageFile(props.imageModalData[\"imageSrc\"])\r\n        setImageDesc(props.imageModalData[\"description\"])\r\n\r\n        if (props.imageModalData[\"imageSrc\"] != \"\") {\r\n            let img = new File([\"\"], props.imageModalData[\"imageName\"],{type: \"image/png\"})\r\n            setFile(img)\r\n            setImageLastModified(img.lastModified)\r\n        } else {\r\n            setFile(null)\r\n        }\r\n        props.setImageUpdated(false)\r\n    }, [props.imageModalOpen])\r\n    \r\n    const useStyles = makeStyles(theme => createStyles({\r\n        previewChip: {\r\n          minWidth: 160,\r\n          maxWidth: 210\r\n        },\r\n      }));\r\n\r\n    let classes = useStyles();\r\n\r\n    const validateData = (title, file) => {\r\n        let titleError = \"\"\r\n        let fileError = \"\"\r\n        if (title.trim().length == 0) {\r\n            titleError = \"Title must not be empty\"\r\n        } else {\r\n            titleError = \"\"\r\n        }\r\n        if (file == null) {\r\n            fileError = \"Must attach an image\"\r\n        } else {\r\n            fileError = \"\"\r\n        }\r\n\r\n        if (titleError.length > 0 && fileError.length > 0) {\r\n            alert(titleError +  \" and \" + fileError)\r\n        } else if (titleError.length > 0) {\r\n            alert(titleError)\r\n        } else if (fileError.length > 0) {\r\n            alert(fileError)\r\n        } else {\r\n            return true\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n    \r\n    return (\r\n        <Dialog open={props.imageModalOpen} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle style={{ paddingBottom: \"0\" }} id=\"form-dialog-title\">{action}</DialogTitle>\r\n            <DialogContent style={{ paddingTop: \"0\" }}>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"imageName\"\r\n                    placeholder=\"Image Name\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    style={{ marginTop: \"0.6rem\" }}\r\n                    onChange={e => setImageTitle(e.target.value)}\r\n                    value={imageTitle}\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"imageDesc\"\r\n                    placeholder=\"Image Description\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    multiline\r\n                    rows={1}\r\n                    rowsMax={4}\r\n                    style={{ marginTop: \"0.8rem\" }}\r\n                    onChange={e => setImageDesc(e.target.value)}\r\n                    value={imageDesc}\r\n                />\r\n                <div style={{ marginTop: \"1rem\" }}>\r\n                    <Typography variant=\"body1\" style={{ color: \"rgba(0, 0, 0, 0.54)\", marginBottom: \"0.25rem\" }}>\r\n                        Tag Color\r\n                    </Typography>\r\n                    <SliderPicker\r\n                        color={imageColor}\r\n                        onChangeComplete={(color) => setImageColor(color.hex)}>\r\n                    </SliderPicker>\r\n                </div>\r\n                <div style={{ marginTop: \"1rem\" }}>\r\n                    <Typography variant=\"body1\" style={{ color: \"rgba(0, 0, 0, 0.54)\", marginBottom: \"0.25rem\" }}>\r\n                            File Uploader\r\n                    </Typography>\r\n                    <DropzoneArea\r\n                        initialFiles = {file != null ? [file] : []}\r\n                        acceptedFiles={['image/*']}\r\n                        dropzoneText={\"Drag and drop an image here or click\"}\r\n                        onChange={(files) => {\r\n\r\n                            if (files[0] == undefined) {\r\n                                setFile(null)\r\n                            } else {\r\n                                setFile(files[0])\r\n                                \r\n                                //new image will have a diff last modified\r\n                                if (files[0].lastModified != imageLastModified) {\r\n                                    props.setImageUpdated(true)\r\n                                }\r\n                            }\r\n                        }}\r\n                        filesLimit={1}\r\n                        showPreviews={true}\r\n                        showPreviewsInDropzone={false}\r\n                        useChipsForPreview\r\n                        previewGridProps={{container: { spacing: 1, direction: 'row' }}}\r\n                        previewChipProps={{classes: { root: classes.previewChip } }}\r\n                        previewText=\"Selected files\"\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={() => props.setImageModalOpen(false)} color=\"primary\">\r\n                Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n                    if (validateData(imageTitle, file)) {\r\n                       if (props.action == \"CREATE\") {\r\n                           props.createNewImage({\r\n                               \"title\":imageTitle,\r\n                               \"description\":imageDesc,\r\n                               \"color\":imageColor,\r\n                           }, file)\r\n                       } else {\r\n                            props.updateImage({\r\n                                \"title\":imageTitle,\r\n                                \"description\":imageDesc,\r\n                                \"color\":imageColor,\r\n                                \"imageId\": props.imageModalData.imageId\r\n                            }, file)\r\n                       }\r\n                    }\r\n                }} \r\n                color=\"primary\">\r\n                {action}\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default ImageModal","C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\firebase.js",[],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\Components\\DeleteModal.js",[],"C:\\Users\\alimu\\Documents\\Projects\\shopify-image-repo\\shopify-image\\src\\firebaseWithSecrets.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"83","severity":1,"message":"84","line":25,"column":13,"nodeType":"85","endLine":38,"endColumn":4},{"ruleId":"79","severity":1,"message":"86","line":27,"column":13,"nodeType":"81","messageId":"82","endLine":27,"endColumn":20},{"ruleId":"79","severity":1,"message":"87","line":2,"column":22,"nodeType":"81","messageId":"82","endLine":2,"endColumn":35},{"ruleId":"83","severity":1,"message":"88","line":58,"column":8,"nodeType":"89","endLine":58,"endColumn":29,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"91","line":64,"column":8,"nodeType":"89","endLine":64,"endColumn":12,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":164,"column":32,"nodeType":"95","messageId":"96","endLine":164,"endColumn":34},{"ruleId":"93","severity":1,"message":"97","line":179,"column":37,"nodeType":"95","messageId":"96","endLine":179,"endColumn":39},{"ruleId":"83","severity":1,"message":"88","line":58,"column":6,"nodeType":"89","endLine":58,"endColumn":51,"suggestions":"98"},{"ruleId":"93","severity":1,"message":"97","line":61,"column":29,"nodeType":"95","messageId":"96","endLine":61,"endColumn":31},{"ruleId":"93","severity":1,"message":"97","line":61,"column":60,"nodeType":"95","messageId":"96","endLine":61,"endColumn":62},{"ruleId":"83","severity":1,"message":"88","line":59,"column":6,"nodeType":"89","endLine":59,"endColumn":51,"suggestions":"99"},{"ruleId":"93","severity":1,"message":"97","line":62,"column":29,"nodeType":"95","messageId":"96","endLine":62,"endColumn":31},{"ruleId":"93","severity":1,"message":"97","line":62,"column":60,"nodeType":"95","messageId":"96","endLine":62,"endColumn":62},{"ruleId":"100","severity":1,"message":"101","line":36,"column":17,"nodeType":"102","endLine":36,"endColumn":81},{"ruleId":"103","severity":1,"message":"104","line":51,"column":17,"nodeType":"105","endLine":51,"endColumn":42},{"ruleId":"93","severity":1,"message":"97","line":14,"column":31,"nodeType":"95","messageId":"96","endLine":14,"endColumn":33},{"ruleId":"79","severity":1,"message":"106","line":18,"column":12,"nodeType":"81","messageId":"82","endLine":18,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":31,"column":46,"nodeType":"95","messageId":"96","endLine":31,"endColumn":48},{"ruleId":"83","severity":1,"message":"107","line":39,"column":8,"nodeType":"89","endLine":39,"endColumn":30,"suggestions":"108"},{"ruleId":"93","severity":1,"message":"97","line":53,"column":33,"nodeType":"95","messageId":"96","endLine":53,"endColumn":35},{"ruleId":"93","severity":1,"message":"97","line":126,"column":42,"nodeType":"95","messageId":"96","endLine":126,"endColumn":44},{"ruleId":"93","severity":1,"message":"94","line":132,"column":59,"nodeType":"95","messageId":"96","endLine":132,"endColumn":61},{"ruleId":"93","severity":1,"message":"97","line":153,"column":41,"nodeType":"95","messageId":"96","endLine":153,"endColumn":43},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'session' is assigned a value but never used.","'ThemeProvider' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'initializeImageData'. Either include it or remove the dependency array.",["112"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["113"],["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'imageFile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [props.authenticated, props.history]",{"range":"125","text":"126"},"Update the dependencies array to be: [db, initializeImageData]",{"range":"127","text":"128"},"Update the dependencies array to be: [props.authenticated, props.history, props.isAuthenticating]",{"range":"129","text":"130"},{"range":"131","text":"130"},"Update the dependencies array to be: [props, props.imageModalOpen]",{"range":"132","text":"133"},[1796,1817],"[props.authenticated, props.history]",[1925,1929],"[db, initializeImageData]",[1740,1785],"[props.authenticated, props.history, props.isAuthenticating]",[1743,1788],[1615,1637],"[props, props.imageModalOpen]"]